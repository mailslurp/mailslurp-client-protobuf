/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/imap_server_fetch_result.proto";
import public "models/imap_server_get_result.proto";
import public "models/imap_server_list_options.proto";
import public "models/imap_server_list_result.proto";
import public "models/imap_server_mailbox_result.proto";
import public "models/imap_server_search_options.proto";
import public "models/imap_server_search_result.proto";
import public "models/imap_server_status_options.proto";
import public "models/imap_server_status_result.proto";
import public "models/imap_update_flags_options.proto";

service ImapControllerService {
  rpc ImapServerFetch (ImapServerFetchRequest) returns (ImapServerFetchResult);

  rpc ImapServerGet (ImapServerGetRequest) returns (ImapServerGetResult);

  rpc ImapServerList (ImapServerListRequest) returns (ImapServerListResult);

  rpc ImapServerMailbox (ImapServerMailboxRequest) returns (ImapServerMailboxResult);

  rpc ImapServerSearch (ImapServerSearchRequest) returns (ImapServerSearchResult);

  rpc ImapServerStatus (ImapServerStatusRequest) returns (ImapServerStatusResult);

  rpc ImapServerUpdateFlags (ImapServerUpdateFlagsRequest) returns (google.protobuf.Empty);

}

message ImapServerFetchRequest {
  int64 seqNum = 1;
  // Inbox ID to search
  string inboxId = 2;

}

message ImapServerGetRequest {
  // Email ID to get
  string emailId = 1;
  // Inbox ID to search
  string inboxId = 2;

}

message ImapServerListRequest {
  ImapServerListOptions imapServerListOptions = 1;
  // Inbox ID to list
  string inboxId = 2;

}

message ImapServerMailboxRequest {
  // Inbox email address to create
  string name = 1;

}

message ImapServerSearchRequest {
  ImapServerSearchOptions imapServerSearchOptions = 1;
  // Inbox ID to search
  string inboxId = 2;

}

message ImapServerStatusRequest {
  ImapServerStatusOptions imapServerStatusOptions = 1;
  // Inbox ID to list
  string inboxId = 2;

}

message ImapServerUpdateFlagsRequest {
  ImapUpdateFlagsOptions imapUpdateFlagsOptions = 1;
  string inboxId = 2;

}

