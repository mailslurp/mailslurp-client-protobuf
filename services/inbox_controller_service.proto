/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 
  The version of the OpenAPI document: 6.5.2
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/create_inbox_dto.proto";
import public "models/email_preview.proto";
import public "models/expired_inbox_dto.proto";
import public "models/inbox.proto";
import public "models/page_email_preview.proto";
import public "models/page_expired_inbox_record_projection.proto";
import public "models/page_inbox_projection.proto";
import public "models/page_sent_email_projection.proto";
import public "models/send_email_options.proto";
import public "models/sent_email_dto.proto";
import public "models/set_inbox_favourited_options.proto";
import public "models/update_inbox_options.proto";

service InboxControllerService {
  rpc CreateInbox (CreateInboxRequest) returns (Inbox);

  rpc CreateInboxWithOptions (CreateInboxWithOptionsRequest) returns (Inbox);

  rpc DeleteAllInboxes (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteInbox (DeleteInboxRequest) returns (google.protobuf.Empty);

  rpc GetAllInboxes (GetAllInboxesRequest) returns (PageInboxProjection);

  rpc GetEmails (GetEmailsRequest) returns (GetEmailsResponse);

  rpc GetExpiredInboxRecordById (GetExpiredInboxRecordByIdRequest) returns (ExpiredInboxDto);

  rpc GetExpiredInboxRecordByInboxId (GetExpiredInboxRecordByInboxIdRequest) returns (ExpiredInboxDto);

  rpc GetExpiredInboxRecords (GetExpiredInboxRecordsRequest) returns (PageExpiredInboxRecordProjection);

  rpc GetInbox (GetInboxRequest) returns (Inbox);

  rpc GetInboxEmailsPaginated (GetInboxEmailsPaginatedRequest) returns (PageEmailPreview);

  rpc GetInboxSentEmails (GetInboxSentEmailsRequest) returns (PageSentEmailProjection);

  rpc GetInboxTags (google.protobuf.Empty) returns (GetInboxTagsResponse);

  rpc GetInboxes (GetInboxesRequest) returns (GetInboxesResponse);

  rpc SendEmail (SendEmailRequest) returns (google.protobuf.Empty);

  rpc SendEmailAndConfirm (SendEmailAndConfirmRequest) returns (SentEmailDto);

  rpc SetInboxFavourited (SetInboxFavouritedRequest) returns (Inbox);

  rpc UpdateInbox (UpdateInboxRequest) returns (Inbox);

}

message CreateInboxRequest {
  // Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with
  string description = 1;
  // A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as `123@mailslurp.com`. If you use the `useDomainPool` option when the email address is null it will generate an email address with a more varied domain ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
  string emailAddress = 2;
  // Optional inbox expiration date. If null then this inbox is permanent and the emails in it won't be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
  string expiresAt = 3;
  // Is the inbox favorited. Favouriting inboxes is typically done in the dashboard for quick access or filtering
  bool favourite = 4;
  // Optional name of the inbox. Displayed in the dashboard for easier search
  string name = 5;
  // Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
  repeated string tags = 6;
  // Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default `@mailslurp.com` email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of `@mailslurp.com` or custom email address provided by the emailAddress field.
  bool useDomainPool = 7;

}

message CreateInboxWithOptionsRequest {
  // createInboxDto
  CreateInboxDto createInboxDto = 1;

}

message DeleteInboxRequest {
  // inboxId
  string inboxId = 1;

}

message GetAllInboxesRequest {
  // Optionally filter results for favourites only
  bool favourite = 1;
  // Optional page index in inbox list pagination
  int32 page = 2;
  // Optionally filter by search words partial matching ID, tags, name, and email address
  string search = 3;
  // Optional page size in inbox list pagination
  int32 size = 4;
  // Optional createdAt sort direction ASC or DESC
  string sort = 5;
  // Optionally filter by tags
  string tag = 6;

}

message GetEmailsRequest {
  // Id of inbox that emails belongs to
  string inboxId = 1;
  // Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
  int32 limit = 2;
  // Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  int64 minCount = 3;
  // Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  int64 retryTimeout = 4;
  // Exclude emails received before this ISO 8601 date time
  string since = 5;
  // Alias for limit. Assessed first before assessing any passed limit.
  int32 size = 6;
  // Sort the results by received date and direction ASC or DESC
  string sort = 7;

}

message GetEmailsResponse {
  repeated EmailPreview data = 1;
}

message GetExpiredInboxRecordByIdRequest {
  // ID of the ExpiredInboxRecord you want to retrieve. This is different from the ID of the inbox you are interested in. See other methods for getting ExpiredInboxRecord for an inbox inboxId)
  string expiredId = 1;

}

message GetExpiredInboxRecordByInboxIdRequest {
  // ID of inbox you want to retrieve (not the inbox ID)
  string inboxId = 1;

}

message GetExpiredInboxRecordsRequest {
  // Optional page index in inbox sent email list pagination
  int32 page = 1;
  // Optional page size in inbox sent email list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;

}

message GetInboxRequest {
  // inboxId
  string inboxId = 1;

}

message GetInboxEmailsPaginatedRequest {
  // Id of inbox that emails belongs to
  string inboxId = 1;
  // Optional page index in inbox emails list pagination
  int32 page = 2;
  // Optional page size in inbox emails list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;

}

message GetInboxSentEmailsRequest {
  // inboxId
  string inboxId = 1;
  // Optional page index in inbox sent email list pagination
  int32 page = 2;
  // Optional page size in inbox sent email list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;

}

message GetInboxTagsResponse {
  repeated string data = 1;
}

message GetInboxesRequest {
  // Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated `getAllEmails` for larger queries.
  int32 size = 1;
  // Optional createdAt sort direction ASC or DESC
  string sort = 2;

}

message GetInboxesResponse {
  repeated Inbox data = 1;
}

message SendEmailRequest {
  // ID of the inbox you want to send the email from
  string inboxId = 1;
  // Options for the email
  SendEmailOptions sendEmailOptions = 2;

}

message SendEmailAndConfirmRequest {
  // ID of the inbox you want to send the email from
  string inboxId = 1;
  // Options for the email
  SendEmailOptions sendEmailOptions = 2;

}

message SetInboxFavouritedRequest {
  // inboxId
  string inboxId = 1;
  // setInboxFavouritedOptions
  SetInboxFavouritedOptions setInboxFavouritedOptions = 2;

}

message UpdateInboxRequest {
  // inboxId
  string inboxId = 1;
  // updateInboxOptions
  UpdateInboxOptions updateInboxOptions = 2;

}

