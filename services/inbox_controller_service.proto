/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/count_dto.proto";
import public "models/create_inbox_dto.proto";
import public "models/create_inbox_ruleset_options.proto";
import public "models/email_preview.proto";
import public "models/flush_expired_inboxes_result.proto";
import public "models/inbox_by_email_address_result.proto";
import public "models/inbox_dto.proto";
import public "models/inbox_exists_dto.proto";
import public "models/inbox_ids_result.proto";
import public "models/inbox_ruleset_dto.proto";
import public "models/page_email_preview.proto";
import public "models/page_inbox_projection.proto";
import public "models/page_inbox_ruleset_dto.proto";
import public "models/page_organization_inbox_projection.proto";
import public "models/page_sent_email_projection.proto";
import public "models/page_tracking_pixel_projection.proto";
import public "models/send_email_options.proto";
import public "models/sent_email_dto.proto";
import public "models/set_inbox_favourited_options.proto";
import public "models/update_inbox_options.proto";

service InboxControllerService {
  rpc CreateInbox (CreateInboxRequest) returns (InboxDto);

  rpc CreateInboxRuleset (CreateInboxRulesetRequest) returns (InboxRulesetDto);

  rpc CreateInboxWithDefaults (google.protobuf.Empty) returns (InboxDto);

  rpc CreateInboxWithOptions (CreateInboxWithOptionsRequest) returns (InboxDto);

  rpc DeleteAllInboxes (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteInbox (DeleteInboxRequest) returns (google.protobuf.Empty);

  rpc DoesInboxExist (DoesInboxExistRequest) returns (InboxExistsDto);

  rpc FlushExpired (FlushExpiredRequest) returns (FlushExpiredInboxesResult);

  rpc GetAllInboxes (GetAllInboxesRequest) returns (PageInboxProjection);

  rpc GetEmails (GetEmailsRequest) returns (GetEmailsResponse);

  rpc GetInbox (GetInboxRequest) returns (InboxDto);

  rpc GetInboxByEmailAddress (GetInboxByEmailAddressRequest) returns (InboxByEmailAddressResult);

  rpc GetInboxCount (google.protobuf.Empty) returns (CountDto);

  rpc GetInboxEmailCount (GetInboxEmailCountRequest) returns (CountDto);

  rpc GetInboxEmailsPaginated (GetInboxEmailsPaginatedRequest) returns (PageEmailPreview);

  rpc GetInboxIds (google.protobuf.Empty) returns (InboxIdsResult);

  rpc GetInboxSentEmails (GetInboxSentEmailsRequest) returns (PageSentEmailProjection);

  rpc GetInboxTags (google.protobuf.Empty) returns (GetInboxTagsResponse);

  rpc GetInboxes (GetInboxesRequest) returns (GetInboxesResponse);

  rpc GetOrganizationInboxes (GetOrganizationInboxesRequest) returns (PageOrganizationInboxProjection);

  rpc ListInboxRulesets (ListInboxRulesetsRequest) returns (PageInboxRulesetDto);

  rpc ListInboxTrackingPixels (ListInboxTrackingPixelsRequest) returns (PageTrackingPixelProjection);

  rpc SendEmail (SendEmailRequest) returns (google.protobuf.Empty);

  rpc SendEmailAndConfirm (SendEmailAndConfirmRequest) returns (SentEmailDto);

  rpc SendTestEmail (SendTestEmailRequest) returns (google.protobuf.Empty);

  rpc SetInboxFavourited (SetInboxFavouritedRequest) returns (InboxDto);

  rpc UpdateInbox (UpdateInboxRequest) returns (InboxDto);

}

message CreateInboxRequest {
  // A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as `123@mailslurp.com`. If you use the `useDomainPool` option when the email address is null it will generate an email address with a more varied domain ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so `SMTP` inboxes will only work with `SMTP` type domains. Avoid `SMTP` inboxes if you need to send emails as they can only receive. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
  string emailAddress = 1;
  // Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
  repeated string tags = 2;
  // Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails.
  string name = 3;
  // Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with
  string description = 4;
  // Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default `@mailslurp.com` email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of `@mailslurp.com` or custom email address provided by the emailAddress field. Note this feature is only available for `HTTP` inbox types.
  bool useDomainPool = 5;
  // Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering
  bool favourite = 6;
  // Optional inbox expiration date. If null then this inbox is permanent and the emails in it won't be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
  string expiresAt = 7;
  // Number of milliseconds that inbox should exist for
  int64 expiresIn = 8;
  // DEPRECATED (team access is always true). Grant team access to this inbox and the emails that belong to it for team members of your organization.
  bool allowTeamAccess = 9;
  // HTTP (default) or SMTP inbox type. HTTP inboxes are default and best solution for most cases. SMTP inboxes are more reliable for public inbound email consumption (but do not support sending emails). When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at `mx.mailslurp.com`.
  string inboxType = 10;

}

message CreateInboxRulesetRequest {
  // inboxId
  string inboxId = 1;
  CreateInboxRulesetOptions createInboxRulesetOptions = 2;

}

message CreateInboxWithOptionsRequest {
  CreateInboxDto createInboxDto = 1;

}

message DeleteInboxRequest {
  string inboxId = 1;

}

message DoesInboxExistRequest {
  // Email address
  string emailAddress = 1;

}

message FlushExpiredRequest {
  // Optional expired at before flag to flush expired inboxes that have expired before the given time
  string before = 1;

}

message GetAllInboxesRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size in list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optionally filter results for favourites only
  bool favourite = 4;
  // Optionally filter by search words partial matching ID, tags, name, and email address
  string search = 5;
  // Optionally filter by tags. Will return inboxes that include given tags
  string tag = 6;
  // DEPRECATED. Optionally filter by team access.
  bool teamAccess = 7;
  // Optional filter by created after given date time
  string since = 8;
  // Optional filter by created before given date time
  string before = 9;

}

message GetEmailsRequest {
  // Id of inbox that emails belongs to
  string inboxId = 1;
  // Alias for limit. Assessed first before assessing any passed limit.
  int32 size = 2;
  // Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
  int32 limit = 3;
  // Sort the results by received date and direction ASC or DESC
  string sort = 4;
  // Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  int64 retryTimeout = 5;
  int64 delayTimeout = 6;
  // Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  int64 minCount = 7;
  bool unreadOnly = 8;
  // Exclude emails received after this ISO 8601 date time
  string before = 9;
  // Exclude emails received before this ISO 8601 date time
  string since = 10;

}

message GetEmailsResponse {
  repeated EmailPreview data = 1;
}

message GetInboxRequest {
  string inboxId = 1;

}

message GetInboxByEmailAddressRequest {
  string emailAddress = 1;

}

message GetInboxEmailCountRequest {
  // Id of inbox that emails belongs to
  string inboxId = 1;

}

message GetInboxEmailsPaginatedRequest {
  // Id of inbox that emails belongs to
  string inboxId = 1;
  // Optional page index in inbox emails list pagination
  int32 page = 2;
  // Optional page size in inbox emails list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter by received after given date time
  string since = 5;
  // Optional filter by received before given date time
  string before = 6;

}

message GetInboxSentEmailsRequest {
  string inboxId = 1;
  // Optional page index in inbox sent email list pagination
  int32 page = 2;
  // Optional page size in inbox sent email list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional sent email search
  string searchFilter = 5;
  // Optional filter by sent after given date time
  string since = 6;
  // Optional filter by sent before given date time
  string before = 7;

}

message GetInboxTagsResponse {
  repeated string data = 1;
}

message GetInboxesRequest {
  // Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated `getAllEmails` for larger queries.
  int32 size = 1;
  // Optional createdAt sort direction ASC or DESC
  string sort = 2;
  // Optional filter by created after given date time
  string since = 3;
  // Optional filter by created before given date time
  string before = 4;

}

message GetInboxesResponse {
  repeated InboxDto data = 1;
}

message GetOrganizationInboxesRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size in list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optional search filter
  string searchFilter = 4;
  // Optional filter by created after given date time
  string since = 5;
  // Optional filter by created before given date time
  string before = 6;

}

message ListInboxRulesetsRequest {
  string inboxId = 1;
  // Optional page index in inbox ruleset list pagination
  int32 page = 2;
  // Optional page size in inbox ruleset list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional search filter
  string searchFilter = 5;
  // Optional filter by created after given date time
  string since = 6;
  // Optional filter by created before given date time
  string before = 7;

}

message ListInboxTrackingPixelsRequest {
  string inboxId = 1;
  // Optional page index in inbox tracking pixel list pagination
  int32 page = 2;
  // Optional page size in inbox tracking pixel list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional search filter
  string searchFilter = 5;
  // Optional filter by created after given date time
  string since = 6;
  // Optional filter by created before given date time
  string before = 7;

}

message SendEmailRequest {
  // ID of the inbox you want to send the email from
  string inboxId = 1;
  SendEmailOptions sendEmailOptions = 2;

}

message SendEmailAndConfirmRequest {
  // ID of the inbox you want to send the email from
  string inboxId = 1;
  SendEmailOptions sendEmailOptions = 2;

}

message SendTestEmailRequest {
  string inboxId = 1;

}

message SetInboxFavouritedRequest {
  string inboxId = 1;
  SetInboxFavouritedOptions setInboxFavouritedOptions = 2;

}

message UpdateInboxRequest {
  string inboxId = 1;
  UpdateInboxOptions updateInboxOptions = 2;

}

