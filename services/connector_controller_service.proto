/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/connector_dto.proto";
import public "models/connector_event_dto.proto";
import public "models/connector_imap_connection_dto.proto";
import public "models/connector_imap_connection_test_result.proto";
import public "models/connector_provider_settings_dto.proto";
import public "models/connector_smtp_connection_dto.proto";
import public "models/connector_smtp_connection_test_result.proto";
import public "models/connector_sync_request_result.proto";
import public "models/connector_sync_settings_dto.proto";
import public "models/create_connector_imap_connection_options.proto";
import public "models/create_connector_options.proto";
import public "models/create_connector_smtp_connection_options.proto";
import public "models/create_connector_sync_settings_options.proto";
import public "models/create_connector_with_options.proto";
import public "models/optional_connector_dto.proto";
import public "models/optional_connector_imap_connection_dto.proto";
import public "models/optional_connector_smtp_connection_dto.proto";
import public "models/optional_connector_sync_settings_dto.proto";
import public "models/page_connector.proto";
import public "models/page_connector_events.proto";
import public "models/send_email_options.proto";
import public "models/sent_email_dto.proto";

service ConnectorControllerService {
  rpc CreateConnector (CreateConnectorRequest) returns (ConnectorDto);

  rpc CreateConnectorImapConnection (CreateConnectorImapConnectionRequest) returns (ConnectorImapConnectionDto);

  rpc CreateConnectorSmtpConnection (CreateConnectorSmtpConnectionRequest) returns (ConnectorSmtpConnectionDto);

  rpc CreateConnectorSyncSettings (CreateConnectorSyncSettingsRequest) returns (ConnectorSyncSettingsDto);

  rpc CreateConnectorWithOptions (CreateConnectorWithOptionsRequest) returns (ConnectorDto);

  rpc DeleteAllConnector (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteConnector (DeleteConnectorRequest) returns (google.protobuf.Empty);

  rpc DeleteConnectorImapConnection (DeleteConnectorImapConnectionRequest) returns (google.protobuf.Empty);

  rpc DeleteConnectorSmtpConnection (DeleteConnectorSmtpConnectionRequest) returns (google.protobuf.Empty);

  rpc DeleteConnectorSyncSettings (DeleteConnectorSyncSettingsRequest) returns (google.protobuf.Empty);

  rpc GetAllConnectorEvents (GetAllConnectorEventsRequest) returns (PageConnectorEvents);

  rpc GetConnector (GetConnectorRequest) returns (ConnectorDto);

  rpc GetConnectorByEmailAddress (GetConnectorByEmailAddressRequest) returns (OptionalConnectorDto);

  rpc GetConnectorByInboxId (GetConnectorByInboxIdRequest) returns (OptionalConnectorDto);

  rpc GetConnectorByName (GetConnectorByNameRequest) returns (OptionalConnectorDto);

  rpc GetConnectorEvent (GetConnectorEventRequest) returns (ConnectorEventDto);

  rpc GetConnectorEvents (GetConnectorEventsRequest) returns (PageConnectorEvents);

  rpc GetConnectorImapConnection (GetConnectorImapConnectionRequest) returns (OptionalConnectorImapConnectionDto);

  rpc GetConnectorProviderSettings (google.protobuf.Empty) returns (ConnectorProviderSettingsDto);

  rpc GetConnectorSmtpConnection (GetConnectorSmtpConnectionRequest) returns (OptionalConnectorSmtpConnectionDto);

  rpc GetConnectorSyncSettings (GetConnectorSyncSettingsRequest) returns (OptionalConnectorSyncSettingsDto);

  rpc GetConnectors (GetConnectorsRequest) returns (PageConnector);

  rpc SendEmailFromConnector (SendEmailFromConnectorRequest) returns (SentEmailDto);

  rpc SyncConnector (SyncConnectorRequest) returns (ConnectorSyncRequestResult);

  rpc TestConnectorImapConnection (TestConnectorImapConnectionRequest) returns (ConnectorImapConnectionTestResult);

  rpc TestConnectorImapConnectionOptions (TestConnectorImapConnectionOptionsRequest) returns (ConnectorImapConnectionTestResult);

  rpc TestConnectorSmtpConnection (TestConnectorSmtpConnectionRequest) returns (ConnectorSmtpConnectionTestResult);

  rpc TestConnectorSmtpConnectionOptions (TestConnectorSmtpConnectionOptionsRequest) returns (ConnectorSmtpConnectionTestResult);

  rpc UpdateConnector (UpdateConnectorRequest) returns (ConnectorDto);

  rpc UpdateConnectorImapConnection (UpdateConnectorImapConnectionRequest) returns (ConnectorImapConnectionDto);

  rpc UpdateConnectorSmtpConnection (UpdateConnectorSmtpConnectionRequest) returns (ConnectorSmtpConnectionDto);

}

message CreateConnectorRequest {
  CreateConnectorOptions createConnectorOptions = 1;
  // Optional inbox ID to associate with the connector
  string inboxId = 2;

}

message CreateConnectorImapConnectionRequest {
  string id = 1;
  CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = 2;

}

message CreateConnectorSmtpConnectionRequest {
  string id = 1;
  CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = 2;

}

message CreateConnectorSyncSettingsRequest {
  string id = 1;
  CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = 2;

}

message CreateConnectorWithOptionsRequest {
  CreateConnectorWithOptions createConnectorWithOptions = 1;
  // Optional inbox ID to associate with the connector
  string inboxId = 2;

}

message DeleteConnectorRequest {
  string id = 1;

}

message DeleteConnectorImapConnectionRequest {
  string id = 1;

}

message DeleteConnectorSmtpConnectionRequest {
  string id = 1;

}

message DeleteConnectorSyncSettingsRequest {
  string id = 1;

}

message GetAllConnectorEventsRequest {
  // Optional connector ID
  string id = 1;
  // Optional page index in connector list pagination
  int32 page = 2;
  // Optional page size in connector list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Filter by event type
  string eventType = 7;

}

message GetConnectorRequest {
  string id = 1;

}

message GetConnectorByEmailAddressRequest {
  // Email address to search for connector by
  string emailAddress = 1;

}

message GetConnectorByInboxIdRequest {
  // Inbox ID to search for connector by
  string inboxId = 1;

}

message GetConnectorByNameRequest {
  // Name to search for connector by
  string name = 1;

}

message GetConnectorEventRequest {
  string id = 1;

}

message GetConnectorEventsRequest {
  string id = 1;
  // Optional page index in connector list pagination
  int32 page = 2;
  // Optional page size in connector list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Filter by event type
  string eventType = 7;

}

message GetConnectorImapConnectionRequest {
  string id = 1;

}

message GetConnectorSmtpConnectionRequest {
  string id = 1;

}

message GetConnectorSyncSettingsRequest {
  string id = 1;

}

message GetConnectorsRequest {
  // Optional page index in connector list pagination
  int32 page = 1;
  // Optional page size in connector list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Filter by created at after the given timestamp
  string since = 4;
  // Filter by created at before the given timestamp
  string before = 5;

}

message SendEmailFromConnectorRequest {
  string id = 1;
  SendEmailOptions sendEmailOptions = 2;
  bool useFallback = 3;

}

message SyncConnectorRequest {
  string id = 1;
  // Date to request emails since
  string since = 2;
  // Which folder to sync emails with
  string folder = 3;
  // Enable or disable logging for the sync operation
  bool logging = 4;

}

message TestConnectorImapConnectionRequest {
  string id = 1;
  CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = 2;

}

message TestConnectorImapConnectionOptionsRequest {
  CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = 1;

}

message TestConnectorSmtpConnectionRequest {
  string id = 1;
  CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = 2;

}

message TestConnectorSmtpConnectionOptionsRequest {
  CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = 1;

}

message UpdateConnectorRequest {
  string id = 1;
  CreateConnectorOptions createConnectorOptions = 2;

}

message UpdateConnectorImapConnectionRequest {
  string id = 1;
  CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = 2;

}

message UpdateConnectorSmtpConnectionRequest {
  string id = 1;
  CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = 2;

}

