/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/connector_dto.proto";
import public "models/connector_imap_connection_dto.proto";
import public "models/connector_smtp_connection_dto.proto";
import public "models/connector_sync_event_dto.proto";
import public "models/connector_sync_request_result.proto";
import public "models/create_connector_imap_connection_options.proto";
import public "models/create_connector_options.proto";
import public "models/create_connector_smtp_connection_options.proto";
import public "models/page_connector.proto";
import public "models/page_connector_sync_events.proto";

service ConnectorControllerService {
  rpc CreateConnector (CreateConnectorRequest) returns (ConnectorDto);

  rpc CreateConnectorImapConnection (CreateConnectorImapConnectionRequest) returns (ConnectorImapConnectionDto);

  rpc CreateConnectorSmtpConnection (CreateConnectorSmtpConnectionRequest) returns (ConnectorSmtpConnectionDto);

  rpc DeleteAllConnector (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteConnector (DeleteConnectorRequest) returns (google.protobuf.Empty);

  rpc DeleteConnectorImapConnection (DeleteConnectorImapConnectionRequest) returns (google.protobuf.Empty);

  rpc DeleteConnectorSmtpConnection (DeleteConnectorSmtpConnectionRequest) returns (google.protobuf.Empty);

  rpc GetAllConnectorSyncEvents (GetAllConnectorSyncEventsRequest) returns (PageConnectorSyncEvents);

  rpc GetConnector (GetConnectorRequest) returns (ConnectorDto);

  rpc GetConnectorSyncEvent (GetConnectorSyncEventRequest) returns (ConnectorSyncEventDto);

  rpc GetConnectorSyncEvents (GetConnectorSyncEventsRequest) returns (PageConnectorSyncEvents);

  rpc GetConnectors (GetConnectorsRequest) returns (PageConnector);

  rpc SyncConnector (SyncConnectorRequest) returns (ConnectorSyncRequestResult);

  rpc UpdateConnector (UpdateConnectorRequest) returns (ConnectorDto);

}

message CreateConnectorRequest {
  CreateConnectorOptions createConnectorOptions = 1;

}

message CreateConnectorImapConnectionRequest {
  string id = 1;
  CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = 2;

}

message CreateConnectorSmtpConnectionRequest {
  string id = 1;
  CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = 2;

}

message DeleteConnectorRequest {
  string id = 1;

}

message DeleteConnectorImapConnectionRequest {
  string id = 1;

}

message DeleteConnectorSmtpConnectionRequest {
  string id = 1;

}

message GetAllConnectorSyncEventsRequest {
  // Optional page index in connector list pagination
  int32 page = 1;
  // Optional page size in connector list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Filter by created at after the given timestamp
  string since = 4;
  // Filter by created at before the given timestamp
  string before = 5;

}

message GetConnectorRequest {
  string id = 1;

}

message GetConnectorSyncEventRequest {
  string id = 1;

}

message GetConnectorSyncEventsRequest {
  string id = 1;
  // Optional page index in connector list pagination
  int32 page = 2;
  // Optional page size in connector list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;

}

message GetConnectorsRequest {
  // Optional page index in connector list pagination
  int32 page = 1;
  // Optional page size in connector list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Filter by created at after the given timestamp
  string since = 4;
  // Filter by created at before the given timestamp
  string before = 5;

}

message SyncConnectorRequest {
  string id = 1;

}

message UpdateConnectorRequest {
  string id = 1;
  CreateConnectorOptions createConnectorOptions = 2;

}

