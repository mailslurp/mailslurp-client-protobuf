/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/consent_status_dto.proto";
import public "models/create_emergency_address_options.proto";
import public "models/emergency_address.proto";
import public "models/emergency_address_dto.proto";
import public "models/empty_response_dto.proto";
import public "models/page_phone_number_projection.proto";
import public "models/page_sent_sms_projection.proto";
import public "models/page_sms_projection.proto";
import public "models/phone_number_dto.proto";
import public "models/phone_number_validation_dto.proto";
import public "models/phone_plan_availability.proto";
import public "models/phone_plan_dto.proto";
import public "models/sent_sms_dto.proto";
import public "models/set_phone_favourited_options.proto";
import public "models/sms_send_options.proto";
import public "models/test_phone_number_options.proto";
import public "models/update_phone_number_options.proto";
import public "models/validate_phone_number_options.proto";

service PhoneControllerService {
  rpc CreateEmergencyAddress (CreateEmergencyAddressRequest) returns (EmergencyAddress);

  rpc DeleteEmergencyAddress (DeleteEmergencyAddressRequest) returns (EmptyResponseDto);

  rpc DeletePhoneNumber (DeletePhoneNumberRequest) returns (google.protobuf.Empty);

  rpc GetConsentStatus (google.protobuf.Empty) returns (ConsentStatusDto);

  rpc GetEmergencyAddress (GetEmergencyAddressRequest) returns (EmergencyAddress);

  rpc GetEmergencyAddresses (google.protobuf.Empty) returns (GetEmergencyAddressesResponse);

  rpc GetPhoneNumber (GetPhoneNumberRequest) returns (PhoneNumberDto);

  rpc GetPhoneNumbers (GetPhoneNumbersRequest) returns (PagePhoneNumberProjection);

  rpc GetPhonePlans (google.protobuf.Empty) returns (GetPhonePlansResponse);

  rpc GetPhonePlansAvailability (google.protobuf.Empty) returns (PhonePlanAvailability);

  rpc GetSentSmsByPhoneNumber (GetSentSmsByPhoneNumberRequest) returns (PageSentSmsProjection);

  rpc GetSmsByPhoneNumber (GetSmsByPhoneNumberRequest) returns (PageSmsProjection);

  rpc SendSmsFromPhoneNumber (SendSmsFromPhoneNumberRequest) returns (SentSmsDto);

  rpc SetConsentStatus (SetConsentStatusRequest) returns (ConsentStatusDto);

  rpc SetPhoneFavourited (SetPhoneFavouritedRequest) returns (PhoneNumberDto);

  rpc TestPhoneNumberSendSms (TestPhoneNumberSendSmsRequest) returns (google.protobuf.Empty);

  rpc UpdatePhoneNumber (UpdatePhoneNumberRequest) returns (PhoneNumberDto);

  rpc ValidatePhoneNumber (ValidatePhoneNumberRequest) returns (PhoneNumberValidationDto);

}

message CreateEmergencyAddressRequest {
  CreateEmergencyAddressOptions createEmergencyAddressOptions = 1;

}

message DeleteEmergencyAddressRequest {
  string addressId = 1;

}

message DeletePhoneNumberRequest {
  string phoneNumberId = 1;

}

message GetEmergencyAddressRequest {
  string addressId = 1;

}

message GetEmergencyAddressesResponse {
  repeated EmergencyAddressDto data = 1;
}

message GetPhoneNumberRequest {
  string phoneNumberId = 1;

}

message GetPhoneNumbersRequest {
  // Optional phone country
  string phoneCountry = 1;
  // Optional page index for list pagination
  int32 page = 2;
  // Optional page size for list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Optional search filter
  string search = 7;
  // Optional phoneIds to include in result
  repeated string include = 8;
  // Optionally filter results for favourites only
  bool favourite = 9;

}

message GetPhonePlansResponse {
  repeated PhonePlanDto data = 1;
}

message GetSentSmsByPhoneNumberRequest {
  string phoneNumberId = 1;
  // Optional page index in SMS list pagination
  int32 page = 2;
  // Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter SMSs received after given date time
  string since = 5;
  // Optional filter SMSs received before given date time
  string before = 6;
  // Optional search filter
  string search = 7;

}

message GetSmsByPhoneNumberRequest {
  string phoneNumberId = 1;
  // Optional page index in SMS list pagination
  int32 page = 2;
  // Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
  bool unreadOnly = 5;
  // Optional filter SMSs received after given date time
  string since = 6;
  // Optional filter SMSs received before given date time
  string before = 7;
  // Optional search filter
  string search = 8;
  // Optionally filter results for favourites only
  bool favourite = 9;

}

message SendSmsFromPhoneNumberRequest {
  string phoneNumberId = 1;
  SmsSendOptions smsSendOptions = 2;

}

message SetConsentStatusRequest {
  bool agree = 1;

}

message SetPhoneFavouritedRequest {
  // ID of phone to set favourite state
  string phoneNumberId = 1;
  SetPhoneFavouritedOptions setPhoneFavouritedOptions = 2;

}

message TestPhoneNumberSendSmsRequest {
  string phoneNumberId = 1;
  TestPhoneNumberOptions testPhoneNumberOptions = 2;
  string xTestId = 3;

}

message UpdatePhoneNumberRequest {
  // ID of phone to set favourite state
  string phoneNumberId = 1;
  UpdatePhoneNumberOptions updatePhoneNumberOptions = 2;

}

message ValidatePhoneNumberRequest {
  ValidatePhoneNumberOptions validatePhoneNumberOptions = 1;

}

