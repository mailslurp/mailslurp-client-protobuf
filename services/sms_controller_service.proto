/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/count_dto.proto";
import public "models/page_sent_sms_projection.proto";
import public "models/page_sms_projection.proto";
import public "models/reply_for_sms.proto";
import public "models/sent_sms_dto.proto";
import public "models/sms_dto.proto";
import public "models/sms_reply_options.proto";
import public "models/sms_send_options.proto";
import public "models/unread_count.proto";

service SmsControllerService {
  rpc DeleteSentSmsMessage (DeleteSentSmsMessageRequest) returns (google.protobuf.Empty);

  rpc DeleteSentSmsMessages (DeleteSentSmsMessagesRequest) returns (google.protobuf.Empty);

  rpc DeleteSmsMessage (DeleteSmsMessageRequest) returns (google.protobuf.Empty);

  rpc DeleteSmsMessages (DeleteSmsMessagesRequest) returns (google.protobuf.Empty);

  rpc GetAllSmsMessages (GetAllSmsMessagesRequest) returns (PageSmsProjection);

  rpc GetReplyForSmsMessage (GetReplyForSmsMessageRequest) returns (ReplyForSms);

  rpc GetSentSmsCount (google.protobuf.Empty) returns (CountDto);

  rpc GetSentSmsMessage (GetSentSmsMessageRequest) returns (SentSmsDto);

  rpc GetSentSmsMessagesPaginated (GetSentSmsMessagesPaginatedRequest) returns (PageSentSmsProjection);

  rpc GetSmsCount (google.protobuf.Empty) returns (CountDto);

  rpc GetSmsMessage (GetSmsMessageRequest) returns (SmsDto);

  rpc GetUnreadSmsCount (google.protobuf.Empty) returns (UnreadCount);

  rpc ReplyToSmsMessage (ReplyToSmsMessageRequest) returns (SentSmsDto);

  rpc SendSms (SendSmsRequest) returns (SentSmsDto);

  rpc SetSmsFavourited (SetSmsFavouritedRequest) returns (SmsDto);

}

message DeleteSentSmsMessageRequest {
  string sentSmsId = 1;

}

message DeleteSentSmsMessagesRequest {
  string phoneNumberId = 1;

}

message DeleteSmsMessageRequest {
  string smsId = 1;

}

message DeleteSmsMessagesRequest {
  string phoneNumberId = 1;

}

message GetAllSmsMessagesRequest {
  // Optional receiving phone number to filter SMS messages for
  string phoneNumber = 1;
  // Optional page index in SMS list pagination
  int32 page = 2;
  // Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter SMSs received after given date time
  string since = 5;
  // Optional filter SMSs received before given date time
  string before = 6;
  // Optional search filter
  string search = 7;
  // Optionally filter results for favourites only
  bool favourite = 8;
  // Optional list of IDs to include in result
  repeated string include = 9;

}

message GetReplyForSmsMessageRequest {
  string smsId = 1;

}

message GetSentSmsMessageRequest {
  string sentSmsId = 1;

}

message GetSentSmsMessagesPaginatedRequest {
  // Optional phone number to filter sent SMS messages for
  string phoneNumber = 1;
  // Optional page index in SMS list pagination
  int32 page = 2;
  // Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter SMSs received after given date time
  string since = 5;
  // Optional filter SMSs received before given date time
  string before = 6;
  // Optional search filter
  string search = 7;

}

message GetSmsMessageRequest {
  string smsId = 1;

}

message ReplyToSmsMessageRequest {
  string smsId = 1;
  SmsReplyOptions smsReplyOptions = 2;

}

message SendSmsRequest {
  SmsSendOptions smsSendOptions = 1;
  // Phone number to send from in E.164 format
  string fromPhoneNumber = 2;
  // Phone number ID to send from in UUID form
  string fromPhoneId = 3;

}

message SetSmsFavouritedRequest {
  // ID of SMS to set favourite state
  string smsId = 1;
  bool favourited = 2;

}

