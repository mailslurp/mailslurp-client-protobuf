/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/abstract_webhook_payload.proto";
import public "models/count_dto.proto";
import public "models/create_webhook_options.proto";
import public "models/json_schema_dto.proto";
import public "models/page_webhook_endpoint_projection.proto";
import public "models/page_webhook_projection.proto";
import public "models/page_webhook_result.proto";
import public "models/unseen_error_count_dto.proto";
import public "models/verify_webhook_signature_options.proto";
import public "models/verify_webhook_signature_results.proto";
import public "models/webhook_bounce_payload.proto";
import public "models/webhook_bounce_recipient_payload.proto";
import public "models/webhook_delivery_status_payload.proto";
import public "models/webhook_dto.proto";
import public "models/webhook_email_opened_payload.proto";
import public "models/webhook_email_read_payload.proto";
import public "models/webhook_headers.proto";
import public "models/webhook_new_attachment_payload.proto";
import public "models/webhook_new_contact_payload.proto";
import public "models/webhook_new_email_payload.proto";
import public "models/webhook_new_sms_payload.proto";
import public "models/webhook_projection.proto";
import public "models/webhook_redrive_all_result.proto";
import public "models/webhook_redrive_result.proto";
import public "models/webhook_result_dto.proto";
import public "models/webhook_test_result.proto";

service WebhookControllerService {
  rpc CreateAccountWebhook (CreateAccountWebhookRequest) returns (WebhookDto);

  rpc CreateWebhook (CreateWebhookRequest) returns (WebhookDto);

  rpc CreateWebhookForPhoneNumber (CreateWebhookForPhoneNumberRequest) returns (WebhookDto);

  rpc DeleteAllWebhooks (DeleteAllWebhooksRequest) returns (google.protobuf.Empty);

  rpc DeleteWebhook (DeleteWebhookRequest) returns (google.protobuf.Empty);

  rpc DeleteWebhookById (DeleteWebhookByIdRequest) returns (google.protobuf.Empty);

  rpc GetAllAccountWebhooks (GetAllAccountWebhooksRequest) returns (PageWebhookProjection);

  rpc GetAllWebhookEndpoints (GetAllWebhookEndpointsRequest) returns (PageWebhookEndpointProjection);

  rpc GetAllWebhookResults (GetAllWebhookResultsRequest) returns (PageWebhookResult);

  rpc GetAllWebhooks (GetAllWebhooksRequest) returns (PageWebhookProjection);

  rpc GetInboxWebhooksPaginated (GetInboxWebhooksPaginatedRequest) returns (PageWebhookProjection);

  rpc GetJsonSchemaForWebhookEvent (GetJsonSchemaForWebhookEventRequest) returns (JSONSchemaDto);

  rpc GetJsonSchemaForWebhookPayload (GetJsonSchemaForWebhookPayloadRequest) returns (JSONSchemaDto);

  rpc GetPhoneNumberWebhooksPaginated (GetPhoneNumberWebhooksPaginatedRequest) returns (PageWebhookProjection);

  rpc GetTestWebhookPayload (GetTestWebhookPayloadRequest) returns (AbstractWebhookPayload);

  rpc GetTestWebhookPayloadBounce (google.protobuf.Empty) returns (WebhookBouncePayload);

  rpc GetTestWebhookPayloadBounceRecipient (google.protobuf.Empty) returns (WebhookBounceRecipientPayload);

  rpc GetTestWebhookPayloadDeliveryStatus (google.protobuf.Empty) returns (WebhookDeliveryStatusPayload);

  rpc GetTestWebhookPayloadEmailOpened (google.protobuf.Empty) returns (WebhookEmailOpenedPayload);

  rpc GetTestWebhookPayloadEmailRead (google.protobuf.Empty) returns (WebhookEmailReadPayload);

  rpc GetTestWebhookPayloadForWebhook (GetTestWebhookPayloadForWebhookRequest) returns (AbstractWebhookPayload);

  rpc GetTestWebhookPayloadNewAttachment (google.protobuf.Empty) returns (WebhookNewAttachmentPayload);

  rpc GetTestWebhookPayloadNewContact (google.protobuf.Empty) returns (WebhookNewContactPayload);

  rpc GetTestWebhookPayloadNewEmail (google.protobuf.Empty) returns (WebhookNewEmailPayload);

  rpc GetTestWebhookPayloadNewSms (google.protobuf.Empty) returns (WebhookNewSmsPayload);

  rpc GetWebhook (GetWebhookRequest) returns (WebhookDto);

  rpc GetWebhookResult (GetWebhookResultRequest) returns (WebhookResultDto);

  rpc GetWebhookResults (GetWebhookResultsRequest) returns (PageWebhookResult);

  rpc GetWebhookResultsCount (GetWebhookResultsCountRequest) returns (CountDto);

  rpc GetWebhookResultsUnseenErrorCount (google.protobuf.Empty) returns (UnseenErrorCountDto);

  rpc GetWebhooks (GetWebhooksRequest) returns (GetWebhooksResponse);

  rpc RedriveAllWebhookResults (google.protobuf.Empty) returns (WebhookRedriveAllResult);

  rpc RedriveWebhookResult (RedriveWebhookResultRequest) returns (WebhookRedriveResult);

  rpc SendTestData (SendTestDataRequest) returns (WebhookTestResult);

  rpc UpdateWebhook (UpdateWebhookRequest) returns (WebhookDto);

  rpc UpdateWebhookHeaders (UpdateWebhookHeadersRequest) returns (WebhookDto);

  rpc VerifyWebhookSignature (VerifyWebhookSignatureRequest) returns (VerifyWebhookSignatureResults);

  rpc WaitForWebhookResults (WaitForWebhookResultsRequest) returns (WaitForWebhookResultsResponse);

}

message CreateAccountWebhookRequest {
  CreateWebhookOptions createWebhookOptions = 1;

}

message CreateWebhookRequest {
  string inboxId = 1;
  CreateWebhookOptions createWebhookOptions = 2;

}

message CreateWebhookForPhoneNumberRequest {
  string phoneNumberId = 1;
  CreateWebhookOptions createWebhookOptions = 2;

}

message DeleteAllWebhooksRequest {
  // before
  string before = 1;

}

message DeleteWebhookRequest {
  string inboxId = 1;
  string webhookId = 2;

}

message DeleteWebhookByIdRequest {
  string webhookId = 1;

}

message GetAllAccountWebhooksRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size for paginated result list.
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Filter by created at after the given timestamp
  string since = 4;
  // Filter by created at before the given timestamp
  string before = 5;
  // Optional event type
  string eventType = 6;
  // Filter by webhook health
  string health = 7;
  // Optional search filter
  string searchFilter = 8;

}

message GetAllWebhookEndpointsRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size for paginated result list.
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optional search filter
  string searchFilter = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by inboxId
  string inboxId = 6;
  // Filter by phoneId
  string phoneId = 7;
  // Filter by created at before the given timestamp
  string before = 8;
  // Filter by webhook health
  string health = 9;
  // Optional event type
  string eventType = 10;

}

message GetAllWebhookResultsRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size in list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optional search filter
  string searchFilter = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Filter for unseen exceptions only
  bool unseenOnly = 7;
  // Filter by result type
  string resultType = 8;
  // Filter by event name
  string eventName = 9;
  // Minimum response status
  int32 minStatusCode = 10;
  // Maximum response status
  int32 maxStatusCode = 11;
  // Inbox ID
  string inboxId = 12;
  // Sms ID
  string smsId = 13;
  // Attachment ID
  string attachmentId = 14;
  // Email ID
  string emailId = 15;
  // Phone ID
  string phoneId = 16;

}

message GetAllWebhooksRequest {
  // Optional page index in list pagination
  int32 page = 1;
  // Optional page size for paginated result list.
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optional search filter
  string searchFilter = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by inboxId
  string inboxId = 6;
  // Filter by phoneId
  string phoneId = 7;
  // Filter by created at before the given timestamp
  string before = 8;
  // Filter by webhook health
  string health = 9;
  // Optional event type
  string eventType = 10;
  // Optional url endpoint filter
  string url = 11;

}

message GetInboxWebhooksPaginatedRequest {
  string inboxId = 1;
  // Optional page index in list pagination
  int32 page = 2;
  // Optional page size in list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional search filter
  string searchFilter = 5;
  // Filter by created at after the given timestamp
  string since = 6;
  // Filter by created at before the given timestamp
  string before = 7;
  // Filter by webhook health
  string health = 8;
  // Optional event type
  string eventType = 9;

}

message GetJsonSchemaForWebhookEventRequest {
  string event = 1;

}

message GetJsonSchemaForWebhookPayloadRequest {
  string webhookId = 1;

}

message GetPhoneNumberWebhooksPaginatedRequest {
  string phoneId = 1;
  // Optional page index in list pagination
  int32 page = 2;
  // Optional page size in list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Optional event type
  string eventType = 7;
  // Optional search filter
  string searchFilter = 8;
  // Filter by webhook health
  string health = 9;

}

message GetTestWebhookPayloadRequest {
  string eventName = 1;

}

message GetTestWebhookPayloadForWebhookRequest {
  string webhookId = 1;

}

message GetWebhookRequest {
  string webhookId = 1;

}

message GetWebhookResultRequest {
  // Webhook Result ID
  string webhookResultId = 1;

}

message GetWebhookResultsRequest {
  // ID of webhook to get results for
  string webhookId = 1;
  // Optional page index in list pagination
  int32 page = 2;
  // Optional page size in list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional search filter
  string searchFilter = 5;
  // Filter by created at after the given timestamp
  string since = 6;
  // Filter by created at before the given timestamp
  string before = 7;
  // Filter for unseen exceptions only
  bool unseenOnly = 8;
  // Filter by result type
  string resultType = 9;
  // Filter by event name
  string eventName = 10;
  // Minimum response status
  int32 minStatusCode = 11;
  // Maximum response status
  int32 maxStatusCode = 12;
  // Inbox ID
  string inboxId = 13;
  // Sms ID
  string smsId = 14;
  // Attachment ID
  string attachmentId = 15;
  // Email ID
  string emailId = 16;
  // Phone ID
  string phoneId = 17;

}

message GetWebhookResultsCountRequest {
  // ID of webhook to get results for
  string webhookId = 1;

}

message GetWebhooksRequest {
  string inboxId = 1;
  // Optional page index in list pagination
  int32 page = 2;
  // Optional page size in list pagination
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;

}

message GetWebhooksResponse {
  repeated WebhookProjection data = 1;
}

message RedriveWebhookResultRequest {
  // Webhook Result ID
  string webhookResultId = 1;

}

message SendTestDataRequest {
  string webhookId = 1;

}

message UpdateWebhookRequest {
  string webhookId = 1;
  CreateWebhookOptions createWebhookOptions = 2;
  string inboxId = 3;
  string phoneNumberId = 4;
  bool overrideAuth = 5;

}

message UpdateWebhookHeadersRequest {
  string webhookId = 1;
  WebhookHeaders webhookHeaders = 2;

}

message VerifyWebhookSignatureRequest {
  VerifyWebhookSignatureOptions verifyWebhookSignatureOptions = 1;

}

message WaitForWebhookResultsRequest {
  // ID of webhook to get results for
  string webhookId = 1;
  // Expected result count
  int32 expectedCount = 2;
  // Max time to wait in milliseconds
  int32 timeout = 3;

}

message WaitForWebhookResultsResponse {
  repeated WebhookResultDto data = 1;
}

