/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/attachment_entity_dto.proto";
import public "models/attachment_meta_data.proto";
import public "models/download_attachment_dto.proto";
import public "models/inline_object.proto";
import public "models/page_attachment_entity.proto";
import public "models/upload_attachment_options.proto";

service AttachmentControllerService {
  rpc DeleteAllAttachments (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteAttachment (DeleteAttachmentRequest) returns (google.protobuf.Empty);

  rpc DownloadAttachmentAsBase64Encoded (DownloadAttachmentAsBase64EncodedRequest) returns (DownloadAttachmentDto);

  rpc DownloadAttachmentAsBytes (DownloadAttachmentAsBytesRequest) returns (DownloadAttachmentAsBytesResponse);

  rpc GetAttachment (GetAttachmentRequest) returns (AttachmentEntityDto);

  rpc GetAttachmentInfo (GetAttachmentInfoRequest) returns (AttachmentMetaData);

  rpc GetAttachments (GetAttachmentsRequest) returns (PageAttachmentEntity);

  rpc UploadAttachment (UploadAttachmentRequest) returns (UploadAttachmentResponse);

  rpc UploadAttachmentBytes (UploadAttachmentBytesRequest) returns (UploadAttachmentBytesResponse);

  rpc UploadMultipartForm (UploadMultipartFormRequest) returns (UploadMultipartFormResponse);

}

message DeleteAttachmentRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBase64EncodedRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBytesRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBytesResponse {
  bytes data = 1;
}

message GetAttachmentRequest {
  // ID of attachment
  string attachmentId = 1;

}

message GetAttachmentInfoRequest {
  // ID of attachment
  string attachmentId = 1;

}

message GetAttachmentsRequest {
  // Optional page index for list pagination
  int32 page = 1;
  // Optional page size for list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;
  // Optional file name and content type search filter
  string fileNameFilter = 4;
  // Filter by created at after the given timestamp
  string since = 5;
  // Filter by created at before the given timestamp
  string before = 6;
  // Optional inboxId to filter attachments by
  string inboxId = 7;
  // Optional emailId to filter attachments by
  string emailId = 8;
  // Optional sentEmailId to filter attachments by
  string sentEmailId = 9;

}

message UploadAttachmentRequest {
  UploadAttachmentOptions uploadAttachmentOptions = 1;

}

message UploadAttachmentResponse {
  repeated string data = 1;
}

message UploadAttachmentBytesRequest {
  string contentType = 1;
  // Optional contentType for file. For instance `application/pdf`
  string contentType2 = 2;
  // Optional content ID (CID) to save upload with
  string contentId = 3;
  // Optional filename to save upload with
  string filename = 4;
  // Optional byte length to save upload with
  int64 fileSize = 5;
  string filename2 = 6;

}

message UploadAttachmentBytesResponse {
  repeated string data = 1;
}

message UploadMultipartFormRequest {
  // Optional content ID of attachment
  string contentId = 1;
  // Optional content type of attachment
  string contentType = 2;
  // Optional name of file
  string filename = 3;
  // Optional content type header of attachment
  string contentTypeHeader = 4;
  // Optional filename header of attachment
  string xFilename = 5;
  // Optional raw filename header of attachment that will be converted to punycode
  string xFilenameRaw = 6;
  // Optional content size of attachment
  int64 xFilesize = 7;
  InlineObject inlineObject = 8;

}

message UploadMultipartFormResponse {
  repeated string data = 1;
}

