/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 
  The version of the OpenAPI document: 6.5.2
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/attachment_meta_data.proto";
import public "models/download_attachment_dto.proto";
import public "models/page_attachment_entity.proto";
import public "models/upload_attachment_options.proto";

service AttachmentControllerService {
  rpc DeleteAttachment (DeleteAttachmentRequest) returns (google.protobuf.Empty);

  rpc DownloadAttachmentAsBase64Encoded (DownloadAttachmentAsBase64EncodedRequest) returns (DownloadAttachmentDto);

  rpc DownloadAttachmentAsBytes (DownloadAttachmentAsBytesRequest) returns (DownloadAttachmentAsBytesResponse);

  rpc GetAttachmentInfo (GetAttachmentInfoRequest) returns (AttachmentMetaData);

  rpc GetAttachments (GetAttachmentsRequest) returns (PageAttachmentEntity);

  rpc UploadAttachment (UploadAttachmentRequest) returns (UploadAttachmentResponse);

  rpc UploadAttachmentBytes (UploadAttachmentBytesRequest) returns (UploadAttachmentBytesResponse);

  rpc UploadMultipartForm (UploadMultipartFormRequest) returns (UploadMultipartFormResponse);

}

message DeleteAttachmentRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBase64EncodedRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBytesRequest {
  // ID of attachment
  string attachmentId = 1;

}

message DownloadAttachmentAsBytesResponse {
  bytes data = 1;
}

message GetAttachmentInfoRequest {
  // ID of attachment
  string attachmentId = 1;

}

message GetAttachmentsRequest {
  // Optional page index event list pagination
  int32 page = 1;
  // Optional page size event list pagination
  int32 size = 2;
  // Optional createdAt sort direction ASC or DESC
  string sort = 3;

}

message UploadAttachmentRequest {
  // uploadOptions
  UploadAttachmentOptions uploadOptions = 1;

}

message UploadAttachmentResponse {
  repeated string data = 1;
}

message UploadAttachmentBytesRequest {
  // Optional contentType for file. For instance `application/pdf`
  string string = 1;
  // Optional filename to save upload with
  string filename = 2;
  // Byte array request body
  bytes byteArray = 3;

}

message UploadAttachmentBytesResponse {
  repeated string data = 1;
}

message UploadMultipartFormRequest {
  // file
  string file = 1;
  // Optional content type of attachment
  string contentType = 2;
  // Optional name of file
  string filename = 3;
  // Optional content type header of attachment
  string xFilename = 4;

}

message UploadMultipartFormResponse {
  repeated string data = 1;
}

