/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 
  The version of the OpenAPI document: 6.5.2
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/email.proto";
import public "models/email_preview.proto";
import public "models/match_options.proto";
import public "models/wait_for_conditions.proto";

service WaitForControllerService {
  rpc WaitFor (WaitForRequest) returns (WaitForResponse);

  rpc WaitForEmailCount (WaitForEmailCountRequest) returns (WaitForEmailCountResponse);

  rpc WaitForLatestEmail (WaitForLatestEmailRequest) returns (Email);

  rpc WaitForMatchingEmail (WaitForMatchingEmailRequest) returns (WaitForMatchingEmailResponse);

  rpc WaitForNthEmail (WaitForNthEmailRequest) returns (Email);

}

message WaitForRequest {
  // Conditions to wait for
  WaitForConditions waitForConditions = 1;

}

message WaitForResponse {
  repeated EmailPreview data = 1;
}

message WaitForEmailCountRequest {
  // Number of emails to wait for. Must be greater that 1
  int32 count = 1;
  // Id of the inbox we are fetching emails from
  string inboxId = 2;
  // Max milliseconds to wait
  int64 timeout = 3;
  // Optional filter for unread only
  bool unreadOnly = 4;

}

message WaitForEmailCountResponse {
  repeated EmailPreview data = 1;
}

message WaitForLatestEmailRequest {
  // Id of the inbox we are fetching emails from
  string inboxId = 1;
  // Max milliseconds to wait
  int64 timeout = 2;
  // Optional filter for unread only.
  bool unreadOnly = 3;

}

message WaitForMatchingEmailRequest {
  // matchOptions
  MatchOptions matchOptions = 1;
  // Number of emails to wait for. Must be greater that 1
  int32 count = 2;
  // Id of the inbox we are fetching emails from
  string inboxId = 3;
  // Max milliseconds to wait
  int64 timeout = 4;
  // Optional filter for unread only
  bool unreadOnly = 5;

}

message WaitForMatchingEmailResponse {
  repeated EmailPreview data = 1;
}

message WaitForNthEmailRequest {
  // Id of the inbox you are fetching emails from
  string inboxId = 1;
  // Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index=1
  int32 index = 2;
  // Max milliseconds to wait for the nth email if not already present
  int64 timeout = 3;
  // Optional filter for unread only
  bool unreadOnly = 4;

}

