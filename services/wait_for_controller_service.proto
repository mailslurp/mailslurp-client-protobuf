/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/email.proto";
import public "models/email_preview.proto";
import public "models/match_options.proto";
import public "models/sms_dto.proto";
import public "models/sms_preview.proto";
import public "models/wait_for_conditions.proto";
import public "models/wait_for_single_sms_options.proto";
import public "models/wait_for_sms_conditions.proto";

service WaitForControllerService {
  rpc WaitFor (WaitForRequest) returns (WaitForResponse);

  rpc WaitForEmailCount (WaitForEmailCountRequest) returns (WaitForEmailCountResponse);

  rpc WaitForLatestEmail (WaitForLatestEmailRequest) returns (Email);

  rpc WaitForLatestSms (WaitForLatestSmsRequest) returns (SmsDto);

  rpc WaitForMatchingEmails (WaitForMatchingEmailsRequest) returns (WaitForMatchingEmailsResponse);

  rpc WaitForMatchingFirstEmail (WaitForMatchingFirstEmailRequest) returns (Email);

  rpc WaitForNthEmail (WaitForNthEmailRequest) returns (Email);

  rpc WaitForSms (WaitForSmsRequest) returns (WaitForSmsResponse);

}

message WaitForRequest {
  WaitForConditions waitForConditions = 1;

}

message WaitForResponse {
  repeated EmailPreview data = 1;
}

message WaitForEmailCountRequest {
  // Id of the inbox we are fetching emails from
  string inboxId = 1;
  // Number of emails to wait for. Must be greater that 1
  int32 count = 2;
  // Max milliseconds to wait
  int64 timeout = 3;
  // Optional filter for unread only
  bool unreadOnly = 4;
  // Filter for emails that were received before the given timestamp
  string before = 5;
  // Filter for emails that were received after the given timestamp
  string since = 6;
  // Sort direction
  string sort = 7;
  // Max milliseconds delay between calls
  int64 delay = 8;

}

message WaitForEmailCountResponse {
  repeated EmailPreview data = 1;
}

message WaitForLatestEmailRequest {
  // Id of the inbox we are fetching emails from
  string inboxId = 1;
  // Max milliseconds to wait
  int64 timeout = 2;
  // Optional filter for unread only.
  bool unreadOnly = 3;
  // Filter for emails that were before after the given timestamp
  string before = 4;
  // Filter for emails that were received after the given timestamp
  string since = 5;
  // Sort direction
  string sort = 6;
  // Max milliseconds delay between calls
  int64 delay = 7;

}

message WaitForLatestSmsRequest {
  WaitForSingleSmsOptions waitForSingleSmsOptions = 1;

}

message WaitForMatchingEmailsRequest {
  // Id of the inbox we are fetching emails from
  string inboxId = 1;
  // Number of emails to wait for. Must be greater or equal to 1
  int32 count = 2;
  MatchOptions matchOptions = 3;
  // Filter for emails that were received before the given timestamp
  string before = 4;
  // Filter for emails that were received after the given timestamp
  string since = 5;
  // Sort direction
  string sort = 6;
  // Max milliseconds delay between calls
  int64 delay = 7;
  // Max milliseconds to wait
  int64 timeout = 8;
  // Optional filter for unread only
  bool unreadOnly = 9;

}

message WaitForMatchingEmailsResponse {
  repeated EmailPreview data = 1;
}

message WaitForMatchingFirstEmailRequest {
  // Id of the inbox we are matching an email for
  string inboxId = 1;
  MatchOptions matchOptions = 2;
  // Max milliseconds to wait
  int64 timeout = 3;
  // Optional filter for unread only
  bool unreadOnly = 4;
  // Filter for emails that were received after the given timestamp
  string since = 5;
  // Filter for emails that were received before the given timestamp
  string before = 6;
  // Sort direction
  string sort = 7;
  // Max milliseconds delay between calls
  int64 delay = 8;

}

message WaitForNthEmailRequest {
  // Id of the inbox you are fetching emails from
  string inboxId = 1;
  // Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index=1
  int32 index = 2;
  // Max milliseconds to wait for the nth email if not already present
  int64 timeout = 3;
  // Optional filter for unread only
  bool unreadOnly = 4;
  // Filter for emails that were received after the given timestamp
  string since = 5;
  // Filter for emails that were received before the given timestamp
  string before = 6;
  // Sort direction
  string sort = 7;
  // Max milliseconds delay between calls
  int64 delay = 8;

}

message WaitForSmsRequest {
  WaitForSmsConditions waitForSmsConditions = 1;

}

message WaitForSmsResponse {
  repeated SmsPreview data = 1;
}

