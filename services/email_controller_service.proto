/*
  MailSlurp API
 
  MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 
  The version of the OpenAPI document: 6.5.2
  Contact: contact@mailslurp.dev
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/attachment_meta_data.proto";
import public "models/can_send_email_results.proto";
import public "models/check_email_body_feature_support_results.proto";
import public "models/check_email_client_support_options.proto";
import public "models/check_email_client_support_results.proto";
import public "models/content_match_options.proto";
import public "models/count_dto.proto";
import public "models/download_attachment_dto.proto";
import public "models/email.proto";
import public "models/email_content_match_result.proto";
import public "models/email_html_dto.proto";
import public "models/email_links_result.proto";
import public "models/email_preview.proto";
import public "models/email_preview_urls.proto";
import public "models/email_text_lines_result.proto";
import public "models/forward_email_options.proto";
import public "models/gravatar_url.proto";
import public "models/imap_flag_operation_options.proto";
import public "models/page_email_projection.proto";
import public "models/raw_email_json.proto";
import public "models/reply_to_email_options.proto";
import public "models/send_email_options.proto";
import public "models/sent_email_dto.proto";
import public "models/unread_count.proto";
import public "models/validation_dto.proto";

service EmailControllerService {
  rpc ApplyImapFlagOperation (ApplyImapFlagOperationRequest) returns (EmailPreview);

  rpc CanSend (CanSendRequest) returns (CanSendEmailResults);

  rpc CheckEmailBodyFeatureSupport (CheckEmailBodyFeatureSupportRequest) returns (CheckEmailBodyFeatureSupportResults);

  rpc CheckEmailClientSupport (CheckEmailClientSupportRequest) returns (CheckEmailClientSupportResults);

  rpc DeleteAllEmails (google.protobuf.Empty) returns (google.protobuf.Empty);

  rpc DeleteEmail (DeleteEmailRequest) returns (google.protobuf.Empty);

  rpc DownloadAttachment (DownloadAttachmentRequest) returns (DownloadAttachmentResponse);

  rpc DownloadAttachmentBase64 (DownloadAttachmentBase64Request) returns (DownloadAttachmentDto);

  rpc DownloadBody (DownloadBodyRequest) returns (DownloadBodyResponse);

  rpc DownloadBodyBytes (DownloadBodyBytesRequest) returns (DownloadBodyBytesResponse);

  rpc ForwardEmail (ForwardEmailRequest) returns (SentEmailDto);

  rpc GetAttachmentMetaData (GetAttachmentMetaDataRequest) returns (AttachmentMetaData);

  rpc GetEmail (GetEmailRequest) returns (Email);

  rpc GetEmailAttachments (GetEmailAttachmentsRequest) returns (GetEmailAttachmentsResponse);

  rpc GetEmailContentMatch (GetEmailContentMatchRequest) returns (EmailContentMatchResult);

  rpc GetEmailCount (google.protobuf.Empty) returns (CountDto);

  rpc GetEmailHTML (GetEmailHTMLRequest) returns (GetEmailHTMLResponse);

  rpc GetEmailHTMLJson (GetEmailHTMLJsonRequest) returns (EmailHtmlDto);

  rpc GetEmailHTMLQuery (GetEmailHTMLQueryRequest) returns (EmailTextLinesResult);

  rpc GetEmailLinks (GetEmailLinksRequest) returns (EmailLinksResult);

  rpc GetEmailPreviewURLs (GetEmailPreviewURLsRequest) returns (EmailPreviewUrls);

  rpc GetEmailTextLines (GetEmailTextLinesRequest) returns (EmailTextLinesResult);

  rpc GetEmailsOffsetPaginated (GetEmailsOffsetPaginatedRequest) returns (PageEmailProjection);

  rpc GetEmailsPaginated (GetEmailsPaginatedRequest) returns (PageEmailProjection);

  rpc GetGravatarUrlForEmailAddress (GetGravatarUrlForEmailAddressRequest) returns (GravatarUrl);

  rpc GetLatestEmail (GetLatestEmailRequest) returns (Email);

  rpc GetLatestEmailInInbox1 (GetLatestEmailInInbox1Request) returns (Email);

  rpc GetOrganizationEmailsPaginated (GetOrganizationEmailsPaginatedRequest) returns (PageEmailProjection);

  rpc GetRawEmailContents (GetRawEmailContentsRequest) returns (google.protobuf.Empty);

  rpc GetRawEmailJson (GetRawEmailJsonRequest) returns (RawEmailJson);

  rpc GetUnreadEmailCount (google.protobuf.Empty) returns (UnreadCount);

  rpc MarkAsRead (MarkAsReadRequest) returns (EmailPreview);

  rpc ReplyToEmail (ReplyToEmailRequest) returns (SentEmailDto);

  rpc SendEmailSourceOptional (SendEmailSourceOptionalRequest) returns (google.protobuf.Empty);

  rpc ValidateEmail (ValidateEmailRequest) returns (ValidationDto);

}

message ApplyImapFlagOperationRequest {
  string emailId = 1;
  ImapFlagOperationOptions imapFlagOperationOptions = 2;

}

message CanSendRequest {
  // ID of the inbox you want to send the email from
  string inboxId = 1;
  SendEmailOptions sendEmailOptions = 2;

}

message CheckEmailBodyFeatureSupportRequest {
  string emailId = 1;

}

message CheckEmailClientSupportRequest {
  CheckEmailClientSupportOptions checkEmailClientSupportOptions = 1;

}

message DeleteEmailRequest {
  // ID of email to delete
  string emailId = 1;

}

message DownloadAttachmentRequest {
  // ID of email
  string emailId = 1;
  // ID of attachment
  string attachmentId = 2;
  // Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly.
  string apiKey = 3;

}

message DownloadAttachmentResponse {
  bytes data = 1;
}

message DownloadAttachmentBase64Request {
  // ID of email
  string emailId = 1;
  // ID of attachment
  string attachmentId = 2;

}

message DownloadBodyRequest {
  // ID of email
  string emailId = 1;

}

message DownloadBodyResponse {
  string data = 1;
}

message DownloadBodyBytesRequest {
  // ID of email
  string emailId = 1;

}

message DownloadBodyBytesResponse {
  bytes data = 1;
}

message ForwardEmailRequest {
  // ID of email
  string emailId = 1;
  ForwardEmailOptions forwardEmailOptions = 2;

}

message GetAttachmentMetaDataRequest {
  // ID of email
  string emailId = 1;
  // ID of attachment
  string attachmentId = 2;

}

message GetEmailRequest {
  string emailId = 1;
  // Decode email body quoted-printable encoding to plain text. SMTP servers often encode text using quoted-printable format (for instance `=D7`). This can be a pain for testing
  bool decode = 2;

}

message GetEmailAttachmentsRequest {
  // ID of email
  string emailId = 1;

}

message GetEmailAttachmentsResponse {
  repeated AttachmentMetaData data = 1;
}

message GetEmailContentMatchRequest {
  // ID of email to match against
  string emailId = 1;
  ContentMatchOptions contentMatchOptions = 2;

}

message GetEmailHTMLRequest {
  string emailId = 1;
  bool decode = 2;
  bool replaceCidImages = 3;

}

message GetEmailHTMLResponse {
  string data = 1;
}

message GetEmailHTMLJsonRequest {
  string emailId = 1;
  bool decode = 2;
  bool replaceCidImages = 3;

}

message GetEmailHTMLQueryRequest {
  // ID of email to perform HTML query on
  string emailId = 1;
  // HTML selector to search for. Uses JQuery/JSoup/CSS style selector like '.my-div' to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information.
  string htmlSelector = 2;

}

message GetEmailLinksRequest {
  // ID of email to fetch text for
  string emailId = 1;

}

message GetEmailPreviewURLsRequest {
  string emailId = 1;

}

message GetEmailTextLinesRequest {
  // ID of email to fetch text for
  string emailId = 1;
  // Decode HTML entities
  bool decodeHtmlEntities = 2;
  // Line separator character
  string lineSeparator = 3;

}

message GetEmailsOffsetPaginatedRequest {
  // Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  repeated string inboxId = 1;
  // Optional page index in email list pagination
  int32 page = 2;
  // Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  bool unreadOnly = 5;
  // Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
  string searchFilter = 6;
  // Optional filter emails received after given date time
  string since = 7;
  // Optional filter emails received before given date time
  string before = 8;

}

message GetEmailsPaginatedRequest {
  // Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  repeated string inboxId = 1;
  // Optional page index in email list pagination
  int32 page = 2;
  // Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  bool unreadOnly = 5;
  // Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
  string searchFilter = 6;
  // Optional filter emails received after given date time. If unset will use time 24hours prior to now.
  string since = 7;
  // Optional filter emails received before given date time
  string before = 8;

}

message GetGravatarUrlForEmailAddressRequest {
  string emailAddress = 1;
  string size = 2;

}

message GetLatestEmailRequest {
  // Optional set of inboxes to filter by. Only get the latest email from these inbox IDs. If not provided will search across all inboxes
  repeated string inboxIds = 1;

}

message GetLatestEmailInInbox1Request {
  // ID of the inbox you want to get the latest email from
  string inboxId = 1;

}

message GetOrganizationEmailsPaginatedRequest {
  // Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
  repeated string inboxId = 1;
  // Optional page index in email list pagination
  int32 page = 2;
  // Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
  int32 size = 3;
  // Optional createdAt sort direction ASC or DESC
  string sort = 4;
  // Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
  bool unreadOnly = 5;
  // Optional search filter search filter for emails.
  string searchFilter = 6;
  // Optional filter emails received after given date time. If unset will use time 24hours prior to now.
  string since = 7;
  // Optional filter emails received before given date time
  string before = 8;

}

message GetRawEmailContentsRequest {
  // ID of email
  string emailId = 1;

}

message GetRawEmailJsonRequest {
  // ID of email
  string emailId = 1;

}

message MarkAsReadRequest {
  string emailId = 1;
  // What value to assign to email read property. Default true.
  bool read = 2;

}

message ReplyToEmailRequest {
  // ID of the email that should be replied to
  string emailId = 1;
  ReplyToEmailOptions replyToEmailOptions = 2;

}

message SendEmailSourceOptionalRequest {
  SendEmailOptions sendEmailOptions = 1;
  // ID of the inbox you want to send the email from
  string inboxId = 2;
  // Use domain pool. Optionally create inbox to send from using the mailslurp domain pool.
  bool useDomainPool = 3;
  // Optionally create inbox to send from that is a virtual inbox and won't send to external addresses
  bool virtualSend = 4;

}

message ValidateEmailRequest {
  // ID of email
  string emailId = 1;

}

